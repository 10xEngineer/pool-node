#!/usr/bin/env ruby

begin
  require '10xengineer-node'
rescue LoadError
  txe_path = File.expand_path('../../lib', __FILE__)

  $:.unshift(txe_path)

  require '10xengineer-node'
end

program :name, "10xeng-node"
program :version, TenxEngineer::Node::VERSION
program :description, "10xEngineer hostnode management toolchain"
program :help_formatter, :compact

$json = false
global_option("-j", "--json", "JSON output (for noninteractive mode)") { $json = true }

default_command :help

# load commands
require '10xengineer-node/vm_commands'

unless File.exists? TenxEngineer::Node::ROOT
  abort "10xEngineer root (#{TenxEngineer::Node::ROOT}) does not exists!"
end

# syslog
Syslog.open("10xeng-vm", Syslog::LOG_PID,
            Syslog::LOG_DAEMON)

Syslog.log(Syslog::LOG_INFO, "started with argv='#{ARGV.join(' ')}'")

# microcloud client
config = "/etc/10xlabs-hostnode.json"
abort "Configuration file does not exists!" unless File.exists?(config)

config = Yajl::Parser.parse(File.open(config))
endpoint = config["endpoint"]

$microcloud = TenxLabs::Microcloud.new(endpoint)

begin
  Commander::Runner.instance.run!
rescue Exception => e

  Syslog.log(Syslog::LOG_CRIT, "command run ended with exception message='#{e.message}'")
  e.backtrace.each do |line|
    Syslog.log(Syslog::LOG_CRIT, line)
  end

  Process.exit 1 if e.message == 'exit'
end
